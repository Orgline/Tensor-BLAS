#include "../include/TensorBLAS.h" 

void tc_cumpsgemm_syrk_p2(cumpsgemm::handle_t cumpsgemm_handle, long int n, long int k, float alpha, float* A, long int lda, float beta, float* C, long int ldc, long int nb)
{
    cumpsgemm::gemm_stridedBatch<float>(
				cumpsgemm_handle,
				CUBLAS_OP_N, CUBLAS_OP_T,
				nb, nb, k,
				&alpha,
				A, lda, nb,
				A, lda, nb,
				&beta,
				C, ldc, nb+nb*lda,
				n/nb,
				CUMPSGEMM_AUTO
				);

    for(int i = 1;n / nb / i / 2 >= 1; i*=2)
    {
        cumpsgemm::gemm_stridedBatch<float>(
				cumpsgemm_handle,
				CUBLAS_OP_N, CUBLAS_OP_T,
				i*nb, i*nb, k,
				&alpha,
				A+i*nb, lda, 2*i*nb,
				A, lda, 2*i*nb,
				&beta,
				C+i*nb, ldc, 2*(i*nb+i*nb*lda),
				n/nb/i/2,
				CUMPSGEMM_AUTO
				);
    }
}

void tc_cumpsgemm_syrk(cumpsgemm::handle_t cumpsgemm_handle, long int n, long int k,  float alpha, float* A, long int lda, float beta, float* C, long int ldc, long int nb)
{
    
    int length;
    if(n%2||k%2) {
        float *A_, *C_;
        long int N = n, K = k;
        n += n%2;
        k += k%2;
        lda = n;
        ldc = n;
        cudaMalloc(&A_, sizeof(float)*n*k);
        cudaMalloc(&C_, sizeof(float)*n*n);
        printf("%ld, %ld\n", n, k);
        // for(int i = 0; i < n; i++){
        //     for(int j = 0; j < k; j++){
        //         if(i < N&&j < K){
        //             A_[i + j*n] = A[i + j*N];
        //             printf("check ok\n");
        //         }
        //         else A_[i + j*n] = 0;
        //     }
        // }
        dim3 grid((k+31)/32, (n+31)/32);
        dim3 block(32,32);
        setInitialValue<<<grid, block>>>(n, n ,C_, n, 1.0);
        setInitialValue<<<grid, block>>>(n, n ,A_, n, 0.0);
        oddt2even<<<grid, block>>>(N, K, A, A_, N, n);//lda lda_
        // printMatrixDeviceBlock("A.csv", N, K, A, N);
        // printMatrixDeviceBlock("A_.csv", n, k, A_, n);
        // printMatrixDeviceBlock("C.csv", N, K, C, n);
        // printMatrixDeviceBlock("C_.csv", N, K, C_, n);
        int64_t* matSize = find_mat_size_syrk(n, &length);
        int offset;
        int rest_n = n;

        for(int i = length; i>=0; i--)
        {
            int nn = matSize[i];
            if(i < length)
                offset += matSize[i + 1];
            else
                offset = 0; 
            if(nn % 8192 ==0 )
            {
                tc_cumpsgemm_syrk_p2(cumpsgemm_handle, nn, k, alpha, A_+offset, lda, beta, C_+offset+offset*ldc, ldc, nb);
            }
            else
            {
                cumpsgemm::gemm(
                        cumpsgemm_handle,
                        CUBLAS_OP_N,
                        CUBLAS_OP_T,
                        nn, nn, k,
                        &alpha,
                        A_+offset, lda,
                        A_+offset, lda,
                        &beta,
                        C_+offset+offset*ldc, ldc,
                        CUMPSGEMM_AUTO
                        );
            }
            if(i != 0)
            {
                rest_n -=  nn;
                cumpsgemm::gemm(
                        cumpsgemm_handle,
                        CUBLAS_OP_N,
                        CUBLAS_OP_T,
                        rest_n, nn, k,
                        &alpha,
                        A_+offset+nn, lda,
                        A_+offset, lda,
                        &beta,
                        C_+offset+offset*ldc+nn, ldc,
                        CUMPSGEMM_AUTO
                        );
            }

            oddt2even<<<grid, block>>>(N, K, C_, C, n, N);
            printf("check ok\n");
        }
    }
    else {
        int64_t* matSize = find_mat_size_syrk(n, &length);
        int offset;
        int rest_n = n;

        for(int i = length; i>=0; i--)
        {
            int nn = matSize[i];
            if(i < length)
                offset += matSize[i + 1];
            else
                offset = 0; 
            if(nn % 8192 ==0 )
            {
                tc_cumpsgemm_syrk_p2(cumpsgemm_handle, nn, k, alpha, A+offset, lda, beta, C+offset+offset*ldc, ldc, nb);
            }
            else
            {
                cumpsgemm::gemm(
                        cumpsgemm_handle,
                        CUBLAS_OP_N,
                        CUBLAS_OP_T,
                        nn, nn, k,
                        &alpha,
                        A+offset, lda,
                        A+offset, lda,
                        &beta,
                        C+offset+offset*ldc, ldc,
                        CUMPSGEMM_AUTO
                        );
            }
            if(i != 0)
            {
                rest_n -=  nn;
                cumpsgemm::gemm(
                        cumpsgemm_handle,
                        CUBLAS_OP_N,
                        CUBLAS_OP_T,
                        rest_n, nn, k,
                        &alpha,
                        A+offset+nn, lda,
                        A+offset, lda,
                        &beta,
                        C+offset+offset*ldc+nn, ldc,
                        CUMPSGEMM_AUTO
                        );
            }
            else
                return;
            
        }
    }
    return;
}